#include <iostream>
#include <vector>
#include <algorithm>    
#include <queue>
using namespace std;

class graph
{
public:
    vector<vector<long long>> adj;
    long long n;
    long long components;
    vector<bool> visited;
    graph(long long n)
    {
        this->n = n;
        adj.resize(n);
        components = 0;
        visited.resize(n, false);
    }
    void add_edge(long long u, long long v)
    {
        adj[u - 1].push_back(v - 1);
    }
    void dfs(long long u)
    {
        visited[u] = true;
        for (long long v : adj[u])
        {
            if (!visited[v])
            {
                dfs(v);
            }
        }
    }
    
    void get_components()
    {
        priority_queue<pair<long long, long long>,vector<pair<long long, long long>>,greater<pair<long long, long long>>> q;
        vector<long long> indegree(n, 0);
        for (long long i = 0; i < n; i++)
        {
            for (long long j : adj[i])
            {
                indegree[j]++;
            }
        }
        for (long long i = 0; i < n; i++)
        {
            q.push(make_pair(indegree[i], i));
        }
        
        while (!q.empty())
        {
            priority_queue<pair<long long, long long>,vector<pair<long long, long long>>,greater<pair<long long, long long>>> q2;            
            auto node = q.top();
            q.pop();
            if (!visited[node.second])
            {
                components++;
                dfs(node.second);
            }
        }
    }
};

void solve()
{
    long long n, m;
    cin >> n >> m;
    graph g(n);
    for (long long i = 0; i < m; i++)
    {
        long long u, v;
        cin >> u >> v;
        g.add_edge(u, v);
    }
    g.get_components();
    cout << g.components << endl;
}
int main()
{
    solve();
    return 0;
}